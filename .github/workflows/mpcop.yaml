name: MPCOP CI/CD
on: [push]
jobs:
  Build-Frontend:
    runs-on: ubuntu-latest
    container:
      image: node:latest
    defaults:
      run:
        working-directory: ./mpcop-web
    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: npm install
      - name: Build static files
        run: npm run build
      - name: Push static files
        uses: actions/upload-artifact@v2
        with:
          name: static
          path: mpcop-web/build

  Build-App:
    needs: Build-Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./mpcop
    steps:
      - uses: actions/checkout@v2
      - name: Instal Debian tools
        run: sudo apt update && sudo apt install devscripts equivs
      - name: Install build dependencies
        run: mk-build-deps --install -aall --tool 'apt-get --assume-yes' --root sudo --remove
      - name: Pull static website
        uses: actions/download-artifact@v2
        with:
          name: static
          path: mpcop/static/
      - name: Clone submodules
        run: git submodule update --init --recursive
      - name: Check version
        id: version_output
        run: >
          export PROJECT_VERSION=$(./gradlew properties --no-daemon --console=plain -q | grep "^version:" | awk '{printf $2}');
          export CHANGELOG_VERSION=$(dpkg-parsechangelog --show-field version);
          test $PROJECT_VERSION == $CHANGELOG_VERSION || (echo "Please, keep changelog version in track with the project version ($PROJECT_VERSION != $CHANGELOG_VERSION)" && exit 1);
          echo "::set-output name=app_version::${CHANGELOG_VERSION}";
      - name: Build package
        run: dpkg-buildpackage -b -us -uc
      - name: Push final package
        uses: actions/upload-artifact@v2
        with:
          name: mpcop-package
          path: mpcop_*.deb
    outputs:
      app_version: ${{ steps.version_output.outputs.app_version }}

  Check-Versions:
    needs: Build-App
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Check package version against tag
        run: test "${{ needs.Build-App.outputs.app_version }}" == "${{ steps.tag.outputs.tag }}"
      - name: Output version
        id: version_output
        run: echo "::set-output name=app_version::${{ needs.Build-App.outputs.app_version }}";
    outputs:
      app_version: ${{ steps.version_output.outputs.app_version }}

  Build-and-Release-Docker:
    needs: Check-Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Pull package
        uses: actions/download-artifact@v2
        with:
          name: mpcop-package
      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=commit_hash::$(git rev-parse HEAD)"    
          echo "::set-output name=curr_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            mpcop/mpcop:latest
            mpcop/mpcop:${{ needs.Check-Versions.outputs.app_version }}
          context: .
          build-args: |
            BUILD_DATE=${{ steps.vars.outputs.curr_date }}
            BUILD_VERSION=${{ needs.Check-Versions.outputs.app_version  }}
            VCS_REF=${{ steps.vars.outputs.commit_hash }}

  Release-App:
    needs: Check-Versions
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    env:
      INPUT_USER: kristian_mika
    steps:
      - uses: actions/checkout@v2
      - name: Pull package
        uses: actions/download-artifact@v2
        with:
          name: mpcop-package
          path: release
      - name: Release package
        uses: docker://lpenz/ghaction-packagecloud:v0.3
        with:
          repository: mpcop/debian/buster
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
